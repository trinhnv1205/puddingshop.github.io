@page "/users"
@using Services
@using Models
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h4">Users</MudText>

<MudForm @onsubmit="()=>Search(searchText)">
    <MudTextField Label="Search" Variant="Variant.Filled" T="string" @bind-Value="searchText" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" >Search</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Button" @onclick="()=>Clear()">Clear</MudButton>
</MudForm>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>AddNewUser()">New User</MudButton>

@if (users == null)
{
    <MudAlert Severity="Severity.Info">Loading...</MudAlert>
}
else
{
    <MudTable Items="users">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Username</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Password</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Role</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Username">@context.Username</MudTd>
        <MudTd DataLabel="First Name">@context.Name</MudTd>
        <MudTd DataLabel="Last Name">@context.Password</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Role">@context.Role</MudTd>
    </RowTemplate>
</MudTable>
}

@code {
    private User[]? users;
    private User? user;
    private string searchText = "";

    private async void AddNewUser()
    {
        user = new User() {
            Id = 100,
            Username = "New User",
            Name = "New User",
            Password = "password",
            Email = "",
            Role = "User",
        };
        await JSRuntime.InvokeVoidAsync("console.log", "Adding new user", user);
        await UserService.Create(user, "password");
        // refresh the UI
        users = await UserService.GetAll();
        StateHasChanged();
    }

    private async Task Search(string searchText)
    {
        // refresh the UI
        this.searchText = searchText;
        this.users = await UserService.GetAll();
        if(this.users != null) this.users = this.users.Where(u => u.Username.Contains(searchText)).ToArray();
        StateHasChanged();
    }

    private async Task Clear()
    {
        searchText = "";
        users = await UserService.GetAll();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAll();
    }
}